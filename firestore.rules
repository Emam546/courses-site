rules_version = '2';
function isAuthUser(){
    return request.auth!=null && request.auth.token.email_verified==true;
}
function isAdmin(){
    return isAuthUser() && request.auth.token.type=="admin";
}
function isCreator(){
    return isAuthUser() && (request.auth.token.type=="admin" || request.auth.token.type=="creator");
}
service cloud.firestore {
  match /databases/{database}/documents {
    function hasTeacherId(){
      return isAuthUser() && request.resource.data.get("teacherId", request.auth.uid) == request.auth.uid;
    }
    function teacherOwnsDoc(){
      return  isAuthUser() && (resource==null || resource.data.get("teacherId", request.auth.uid) == request.auth.uid);
    }

    function verifyFields(required, optional) {
      let allAllowedFields = required.concat(optional);
      return request.resource.data.keys().hasAll(required) &&
        request.resource.data.keys().hasOnly(allAllowedFields);
    }
    function allowFields(fields){
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
    }
    // function isMap(key){
    //   return request.resource.data.get(key,{}) is map || request.resource.data.get(key,"")==null;
    // }
    function isStr(key){
      return request.resource.data.get(key,"") is string || request.resource.data.get(key,"")==null;
    }
    function isList(key){
      return request.resource.data.get(key,[]) is list || request.resource.data.get(key,"")==null;
    }
    function isInt(key){
      return request.resource.data.get(key,0) is int || request.resource.data.get(key,"")==null;
    }
    function isBool(key){
      return request.resource.data.get(key,false) is bool || request.resource.data.get(key,"")==null;
    }
    function istimeStamp(key){
      return request.resource.data.get(key,request.time) is timestamp || request.resource.data.get(key,"")==null;
    }
    function isEqualTime(key){
      return resource!=null || request.resource.data.get(key,request.time)==request.time;
    }

    match /{document=**} {
      allow read:if isAdmin();
      allow write:if false;
    }
    function checkLevelId(){
        let levelId=request.resource.data.levelId;
        return (levelId is string && 
          get(/databases/$(database)/documents/Levels/$(levelId)).data.teacherId==request.auth.uid
        );
      }
    function checkCourseId(){
      let courseId=request.resource.data.courseId;
      return (courseId is string && 
        get(/databases/$(database)/documents/Courses/$(courseId)).data.teacherId==request.auth.uid
      );
    }
    function checkLessonId(){
      let lessonId=request.resource.data.lessonId;
      return  (lessonId is string && 
        get(/databases/$(database)/documents/Lessons/$(lessonId)).data.teacherId==request.auth.uid
      );
    }

    function checkPrice(){
      let price=request.resource.data.price;
      return  price.num is int && price.num >= 0 && price.currency is string;
    }
    match /Levels/{id}{
      function verfiedData(){
          return isStr("name") && isStr("desc") && isBool("hide") && isStr('teacherId') && isInt("order") && isList("usersAdderIds");
      }
      allow read:if isAuthUser();
      allow create:if isCreator() && hasTeacherId() && verifyFields(['name', 'desc', 'teacherId',"order","hide","usersAdderIds"],[])&& verfiedData();
      allow update:if isCreator() && teacherOwnsDoc()&& allowFields(['name', 'desc',"order","hide","usersAdderIds"])&& verfiedData();
      allow delete:if isCreator() && teacherOwnsDoc();
    }
    match /Courses/{id}{
      function verfiedData(){
        return isStr("name") && isStr("desc")&&
        isStr('teacherId')&& isBool("hide") && isBool("featured") && isList("paymentAdderIds")
        && isInt("order")&& checkLevelId() && checkPrice() && isEqualTime("createdAt") && istimeStamp("publishedAt");
      }
      allow read:if isAuthUser();
      allow create:if isCreator() && hasTeacherId()&& verifyFields(['name', 'desc', 'teacherId',"levelId","hide","order","featured","createdAt","publishedAt","price","paymentAdderIds"],[]) && verfiedData();
      allow update:if isCreator() && teacherOwnsDoc()&& allowFields(['name', 'desc',"hide","order","featured","publishedAt","price","paymentAdderIds"])&& verfiedData();
      allow delete:if isCreator() && teacherOwnsDoc();
    }
    match /Lessons/{id}{
      function checkVideo(){
        let list=["youtube"];
        let val=request.resource.data.get("video",null);
        return val==null || (val.type in list && val.id is string && val.hide is bool);
      }
      function canRead(){
        return isAuthUser() && request.auth.uid in resource.data.adderIds;
      }
      function verfiedData(){
        return isStr("name") && isStr("desc")&& isStr("briefDesc") &&
        isStr('teacherId')&& isBool("hide") && 
        isInt("order")&& checkCourseId()&& checkVideo()&& isList("adderIds") && isEqualTime("createdAt") && istimeStamp("publishedAt");
      }
      allow read:if teacherOwnsDoc()|| canRead();
      allow create:if isCreator() && hasTeacherId()&& verifyFields(['name', 'desc', 'teacherId',"courseId","briefDesc","publishedAt","hide","order","createdAt","adderIds"],["video"])&& verfiedData() ;
      allow update:if isCreator() && teacherOwnsDoc()&& allowFields(['name', 'desc',"hide","briefDesc","publishedAt","order","adderIds","video"])&& verfiedData();
      allow delete:if isCreator() && teacherOwnsDoc();
    }
    match /Exams/{id}{
      function checkRandom(){
        let random=request.resource.data.random;
        let num=request.resource.data.num;
        let shuffle=request.resource.data.shuffle;
        return (random==true && num is int && num>0)||(random==false && shuffle is bool)
      }
      function checkQuestionIds(){
        let val=request.resource.data.questionIds;
        return val is list && val.size()>0;
      }
      function checkTime(){
        let time=request.resource.data.time;
        return time is int && time>60000;
      }
      function verfiedData(){
        return isStr("name") && isStr("desc") &&
        isStr('teacherId')&& isBool("hide") && isBool("random") && isBool("repeatable") &&
        isInt("order")&& checkCourseId() && checkLessonId()&& isEqualTime("createdAt") && checkQuestionIds()&& checkRandom()&& checkTime() ;
      }
      allow read:if teacherOwnsDoc();
      allow create:if hasTeacherId()&& verifyFields(['name', 'desc', 'teacherId',"courseId","lessonId","hide","order","questionIds","createdAt","random","repeatable","time"],["num","shuffle"])&& verfiedData() ;
      allow update:if teacherOwnsDoc()&& allowFields(['name', 'desc',"hide","order","random","num","shuffle","time","questionIds","repeatable"])&& verfiedData();
      allow delete:if teacherOwnsDoc();
    }
    match /Questions/{id}{
      function canEdit(data){
        let lessonId=data.data.lessonId;
        let teacherId=request.auth.uid;
        let lesson=get(/databases/$(database)/documents/Lessons/$(lessonId)).data;
        return isAuthUser() && (lesson.teacherId==teacherId || (teacherId in lesson.adderIds));
      }
      function checkCreatorId(){
        return isAuthUser() && (resource!=null || request.resource.data.creatorId==request.auth.uid);
      }
      function checkChoices(){
        return isList("choices") && request.resource.data.choices.size()>1;
      }
      function checkcanEditCourse(){
        let lessonId=request.resource.data.lessonId;
        let courseId=request.resource.data.courseId;
        let lesson=get(/databases/$(database)/documents/Lessons/$(lessonId));
        return  courseId is string && 
          get(/databases/$(database)/documents/Courses/$(courseId)).data.teacherId==lesson.data.teacherId;
      }
      function verfiedData(){
        return isStr("quest") && checkChoices()&& isStr("answer") &&
        isBool("shuffle") && isEqualTime("createdAt") ;
      }
      allow read:if resource==null|| canEdit(resource);
      allow create:if canEdit(request.resource) && verifyFields(["quest", "choices","shuffle","answer","courseId","lessonId","createdAt","creatorId"],[])&& verfiedData() && checkCreatorId() && checkcanEditCourse();
      allow update:if canEdit(resource) && allowFields(["quest", "choices","shuffle","answer"])&& verfiedData();
      allow delete:if canEdit(resource);
    }
    match /Students/{id}{
      function verfiyData(){
        return isStr("displayName") && isStr("email")
        && isStr("levelId") && isBool("emailVerified") && isStr("userName")
        && isStr("creatorId") && isStr("phone");
      }
      function canEdit(data){
        let levelId=data.data.levelId;
        let teacherId=request.auth.uid;
        let course=get(/databases/$(database)/documents/Levels/$(levelId)).data;
        return isAuthUser() && (teacherId in course.usersAdderIds);
      }
      allow read:if (isCreator() && teacherOwnsDoc()) || canEdit(resource);
      allow create:if false;
      allow update:if ((isCreator() && teacherOwnsDoc()) || canEdit(request.resource)) && allowFields(["levelId","blocked"]) && verfiyData();
      allow delete:if teacherOwnsDoc();
    }
    match /Teacher/{id}{
      function verfiedData(){
        return isStr("displayName") && isStr("phone") &&
        isStr('photoUrl') && isStr("type") && request.resource.data.type in ["admin","creator","assistant"];
      }
      function AdminUpdate(){
        return isAdmin() && allowFields(["blocked","type"]);
      }
      function TeacherUpdate(){
        return isAuthUser() && id==request.auth.uid && allowFields(["displayName","phone","photoUrl"]);
      }
      allow read:if isAuthUser();
      allow create:if false;
      allow update:if (AdminUpdate() || TeacherUpdate()) && verfiedData();
      allow delete:if isAdmin();
    }
    match /TeacherInfo/{id}{
      function isOwnsDoc(){
        return isAuthUser() && id==request.auth.uid;
      }
      allow read:if isAuthUser();
      allow create:if false;
      allow update:if isOwnsDoc();
      allow delete:if false;
    }
    match /Results/{id}{
      allow read:if teacherOwnsDoc();
      allow create:if false;
      allow update:if false;
      allow delete:if teacherOwnsDoc();
    }  
    match /Payments/{id}{
      function canEdit(data){
        let courseId=data.data.courseId;
        let teacherId=request.auth.uid;
        let course=get(/databases/$(database)/documents/Courses/$(courseId)).data;
        return isAuthUser() && (course.teacherId==teacherId || (teacherId in course.paymentAdderIds));
      }
      function checkType(){
          return request.resource.data.type in ["admin"];
      }
      function verfiedData(){
        return checkCourseId() && istimeStamp("activatedAt")&& isStr("userId") && checkType() && checkPrice() && isStr("creatorId");
      }
      allow read:if teacherOwnsDoc() || canEdit(resource);
      allow create:if canEdit(request.resource) && verifyFields(["courseId","teacherId","creatorId","type","price"],["userId","activatedAt"])&& verfiedData() ;
      allow update:if false;
      allow delete:if teacherOwnsDoc();
    }
    match /EnrolledUsersRecord/{id}{
      function canRead(){
          let teacherId=request.auth.uid;
          let course=get(/databases/$(database)/documents/Courses/$(id)).data;
          return isAuthUser() && (teacherId in course.paymentAdderIds);
      }
      allow read:if teacherOwnsDoc() || canRead();
      allow write:if false
    }
  }
}
